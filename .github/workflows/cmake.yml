# Touched!

name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Install GLFW3      
      run: sudo apt-get install -y libglfw3-dev
      
    - name: Install OpenGL
      run: sudo apt-get install -y mesa-common-dev

    - name: Install OpenGL GLU
      # We don't need this but glfw includes glu.h
      run: sudo apt-get install -y libglu1-mesa-dev

    - name: Install OpenAL
      run: sudo apt-get install -y libopenal-dev

    - name: Install CURL
      run: sudo apt-get install -y libcurl4-openssl-dev

#    Not available in ubunutu-latest?
#    -name: Install OpenXR
#      run: sudo apt-get install -y libopenxr-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DSGF_DISABLE_WEBXR=1

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
